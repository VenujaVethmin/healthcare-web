// This is your Prisma schema file,
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  password             String?
  image                String?
  role                 Role                  @default(PATIENT)
  userProfile          UserProfile?
  doctorProfile        DoctorProfile?
  doctorAppointments   Appointment[]         @relation("Doctor")
  patientAppointments  Appointment[]         @relation("Patient")
  prescriptions        Prescription[]        @relation("Patient")
  doctorPrescriptions  Prescription[]        @relation("Doctor")
  doctorBookingDetails DoctorBookingDetails?
}

enum Role {
  PATIENT
  DOCTOR
  PHARMACIST
  ADMIN
}

model UserProfile {
  id      String    @id @default(cuid())
  userId  String    @unique
  user    User      @relation(fields: [userId], references: [id])
  phone   String?
  address String?
  dob     DateTime?
  bio     String? @default("hi hello")
  bloodType String?
  allergies String?
  emergencyContact Json?
}

model DoctorProfile {
  id           String  @id @default(cuid())
  userId       String  @unique
  user         User    @relation(fields: [userId], references: [id])
  bio         String? @default("hi hello")
  specialty    String?
  experience   String?
  qualifications String?
  education    String?
  availability String?
}

model Appointment {
  id        String    @id @default(cuid())
  doctorId  String
  doctor    User      @relation("Doctor", fields: [doctorId], references: [id])
  patientId String
  patient   User      @relation("Patient", fields: [patientId], references: [id])
  specialty String?
  number    Int?
  room      String?
  date      DateTime?
  time      DateTime? // Appointment start time
  pStatus     pStatus?         @default(PENDING)
  status          AppointmentStatus @default(Scheduled)
  contact         String?
  paid            Boolean?          @default(false)
  consultationFee Float?
  createdAt       DateTime          @default(now())

  // One-to-many relationship with Prescription
  prescriptions Prescription?
}

enum pStatus {
  PENDING
  READY
  COMPLETED
}

model Prescription {
  id               String      @id @default(cuid())
  appointmentId    String      @unique
  appointment      Appointment @relation(fields: [appointmentId], references: [id])
  doctorId         String
  doctor           User        @relation("Doctor", fields: [doctorId], references: [id])
  patientId        String
  patient          User        @relation("Patient", fields: [patientId], references: [id])
  prescriptionDate DateTime    @default(now())
  medicine         Json?
  notes            String?
  createdAt       DateTime    @default(now())
}


enum AppointmentStatus {
  Scheduled
  COMPLETED
}

model DoctorBookingDetails {
  id                  String   @id @default(cuid())
  doctorId            String   @unique
  doctor              User     @relation(fields: [doctorId], references: [id])
  specialty           String? @default("General Practitioner")
  room               String? @default("Room 1")
  appointmentDuration Int?
  maxPatientsPerDay   Int?
  consultationFee     Float?
  isPublished         Boolean? @default(false)
  createdAt           DateTime @default(now())

  // One-to-many relationship with WorkingHour
  workingHours WorkingHour[] @relation("DoctorBookingHours")
}

model WorkingHour {
  id        String    @id @default(cuid())
  day       DayOfWeek
  startTime String    @default("09:00") // Stored as "HH:mm"
  endTime   String    @default("17:00") // Stored as "HH:mm"
  isWorking Boolean   @default(true)

  // Foreign key reference to DoctorBookingDetails
  doctorBookingDetailsId String
  doctorBookingDetails   DoctorBookingDetails @relation("DoctorBookingHours", fields: [doctorBookingDetailsId], references: [id])
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
