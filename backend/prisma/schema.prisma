// This is your Prisma schema file,
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  name     String?
  email    String  @unique
  image    String?
  role     Role    @default(PATIENT)
  userProfile UserProfile?
  doctorProfile DoctorProfile?
  doctorAppointments  Appointment[] @relation("Doctor")
  patientAppointments Appointment[] @relation("Patient")
  doctorBookingDetails DoctorBookingDetails?
}

enum Role {
  PATIENT
  DOCTOR
  PHARMACIST
  ADMIN
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  phone     String?
  address   String?
  dob       DateTime?
  age       Int?
  bio       String?
}

model DoctorProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  specialty    String?
  experience   String?
  education    String?
  availability String?
}

model Appointment {
  id               String   @id @default(cuid())
  doctorId         String
  doctor           User     @relation("Doctor", fields: [doctorId], references: [id])
  patientId        String
  patient          User     @relation("Patient", fields: [patientId], references: [id])
  specialty        String?
  number           Int?
  room             String?
  date             DateTime?
  time             DateTime?  // Appointment start time
  expectedEndTime  DateTime?  // Default: `time` + consultation duration
  actualEndTime    DateTime?  // When the doctor actually finished
  status           AppointmentStatus @default(Scheduled)
  contact          String?
  paid             Boolean? @default(false)
  consultationFee  Float?
  createdAt        DateTime @default(now())
}


enum AppointmentStatus {
  Scheduled
  COMPLETED
}

model DoctorBookingDetails {
  id                   String   @id @default(cuid())
  doctorId             String   @unique
  doctor               User     @relation(fields: [doctorId], references: [id])
  specialty            String?
  appointmentDuration  Int?
  maxPatientsPerDay    Int?
  consultationFee      Float?
  isPublished          Boolean? @default(false)
  createdAt            DateTime @default(now())

  // One-to-many relationship with WorkingHour
  workingHours         WorkingHour[] @relation("DoctorBookingHours")
}

model WorkingHour {
  id        String   @id @default(cuid())
  day       DayOfWeek
  startTime String   @default("09:00")  // Stored as "HH:mm"
  endTime   String   @default("17:00")  // Stored as "HH:mm"
  isWorking Boolean  @default(true)

  // Foreign key reference to DoctorBookingDetails
  doctorBookingDetailsId String
  doctorBookingDetails DoctorBookingDetails @relation("DoctorBookingHours", fields: [doctorBookingDetailsId], references: [id])
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
